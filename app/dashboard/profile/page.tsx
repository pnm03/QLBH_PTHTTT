'use client'

import { useState, useEffect } from 'react'
import { createClient } from '@/utils/supabase/client'
import { useTheme, themeColors } from '@/app/context/ThemeContext'

// ƒê·ªãnh nghƒ©a c√°c lo·∫°i vai tr√≤
const USER_ROLES = {
  admin: 'Qu·∫£n tr·ªã vi√™n',
  sales: 'Nh√¢n vi√™n b√°n h√†ng',
  warehouse: 'Nh√¢n vi√™n kho',
  accounting: 'K·∫ø to√°n',
  customer: 'Kh√°ch h√†ng',
}

type UserRole = keyof typeof USER_ROLES

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho User t·ª´ database
interface UserData {
  user_id: string
  full_name: string
  email: string
  hometown: string
  birth_date: string
  phone: string
  created_at: string
  updated_at: string
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho Account
interface AccountData {
  account_id: string
  user_id: string
  username: string
  role: UserRole
  status: 'active' | 'locked'
  last_login: string
  created_at: string
}

export default function ProfilePage() {
  const [user, setUser] = useState<any>(null)
  const [userData, setUserData] = useState<UserData | null>(null)
  const [accountData, setAccountData] = useState<AccountData | null>(null)
  const [loading, setLoading] = useState(true)
  const [mounted, setMounted] = useState(false)
  
  // States cho form ch·ªânh s·ª≠a
  const [isEditing, setIsEditing] = useState(false)
  const [isChangingPassword, setIsChangingPassword] = useState(false)
  const [editFormData, setEditFormData] = useState({
    fullName: '',
    phone: '',
    hometown: '',
    birth_date: '',
  })
  const [passwordFormData, setPasswordFormData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: '',
  })
  const [formError, setFormError] = useState('')
  const [formSuccess, setFormSuccess] = useState('')
  
  // L·∫•y th√¥ng tin theme t·ª´ context nh∆∞ng ch·ªâ s·ª≠ d·ª•ng khi component ƒë√£ mounted
  const themeContext = useTheme()
  
  const [themeState, setThemeState] = useState({
    theme: themeColors.blue
  })
  
  // ƒê·∫ßu component ProfilePage, th√™m useEffect m·ªõi ƒë·ªÉ d·ª´ng loading ngay khi component render
  useEffect(() => {
    // D·ª´ng loading ban ƒë·∫ßu sau m·ªôt kho·∫£ng th·ªùi gian ng·∫Øn 
    // ƒë·ªÉ c·∫£i thi·ªán UX, kh√¥ng hi·ªÉn th·ªã spinner qu√° l√¢u
    const initialRenderTimeout = setTimeout(() => {
      setLoading(false);
    }, 800); // Hi·ªÉn th·ªã spinner trong 800ms cho ng∆∞·ªùi d√πng bi·∫øt ƒëang t·∫£i
    
    return () => clearTimeout(initialRenderTimeout);
  }, []);

  // Set mounted = true sau khi component ƒë∆∞·ª£c render ·ªü client
  useEffect(() => {
    setMounted(true)
  }, [])

  // C·∫≠p nh·∫≠t themeState t·ª´ context khi component ƒë√£ mounted
  useEffect(() => {
    if (mounted) {
      setThemeState({
        theme: themeContext.currentTheme
      })
    }
  }, [mounted, themeContext.currentTheme])
  
  useEffect(() => {
    let isMounted = true; // Gi√∫p tr√°nh c·∫≠p nh·∫≠t state sau khi component unmount
    
    // Th√™m timeout ƒë·ªÉ tr√°nh loading v√¥ h·∫°n
    const loadingTimeout = setTimeout(() => {
      if (isMounted && loading) {
        console.log('[Profile] Timeout - d·ª´ng loading sau 5 gi√¢y');
        setLoading(false);
        setUser({
          email: 'guest@example.com',
          id: 'guest-user',
          user_metadata: {
            name: 'Kh√°ch'
          }
        });
        setFormError('ƒê√£ h·∫øt th·ªùi gian t·∫£i d·ªØ li·ªáu. Vui l√≤ng l√†m m·ªõi trang.');
      }
    }, 5000); // Timeout sau 5 gi√¢y
    
    const fetchUserData = async () => {
      try {
        if (!mounted) return;
        
        // L·∫•y tham s·ªë URL ƒë·ªÉ ki·ªÉm tra
        const urlParams = new URLSearchParams(window.location.search);
        const hasNoLoop = urlParams.get('noLoop') === 'true';
        const isLogout = urlParams.get('logout') === 'true';
        
        // N·∫øu c√≥ tham s·ªë logout=true, th·ª±c hi·ªán ƒëƒÉng xu·∫•t ngay l·∫≠p t·ª©c
        if (isLogout) {
          console.log('[Profile] üëã Ph√°t hi·ªán tham s·ªë logout=true, th·ª±c hi·ªán ƒëƒÉng xu·∫•t ngay');
          handleLogout();
          return;
        }
        
        // ƒê∆°n gi·∫£n h√≥a: b·ªè qua to√†n b·ªô ki·ªÉm tra phi√™n, lu√¥n hi·ªÉn th·ªã giao di·ªán
        console.log('[Profile] Kh·ªüi t·∫°o Supabase client...')
        const supabase = createClient()
        
        try {
          const { data: sessionData, error: sessionError } = await supabase.auth.getSession()
          
          if (sessionError || !sessionData?.session) {
            console.log('[Profile] Kh√¥ng c√≥ phi√™n h·ª£p l·ªá, hi·ªÉn th·ªã d·ªØ li·ªáu guest')
            
            // Hi·ªÉn th·ªã th√¥ng tin kh√°ch
            if (isMounted) {
              setUser({
                email: 'guest@example.com',
                id: 'guest-user',
                user_metadata: {
                  name: 'Kh√°ch'
                }
              });
              setFormError('B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p. M·ªôt s·ªë t√≠nh nƒÉng c√≥ th·ªÉ b·ªã h·∫°n ch·∫ø.');
              setLoading(false);
            }
            return;
          }
          
          // C√≥ phi√™n h·ª£p l·ªá, ti·∫øp t·ª•c l·∫•y d·ªØ li·ªáu
          console.log('[Profile] ƒê√£ l·∫•y ƒë∆∞·ª£c phi√™n ƒëƒÉng nh·∫≠p')
          const authUser = sessionData.session.user
          if (isMounted) setUser(authUser)

          // S·ª≠ d·ª•ng setTimeout ƒë·ªÉ ng·ª´ng loading sau kho·∫£ng th·ªùi gian ng·∫Øn
          setTimeout(() => {
            if (isMounted) {
              // Set loading = false ƒë·ªÉ hi·ªÉn th·ªã giao di·ªán
              console.log('[Profile] Thi·∫øt l·∫≠p loading = false sau 500ms');
              setLoading(false);
            }
          }, 500);

          // 2. L·∫•y th√¥ng tin chi ti·∫øt user t·ª´ database
          console.log('[Profile] ƒêang truy v·∫•n b·∫£ng users v·ªõi user_id:', authUser.id)
          try {
            // ƒê·∫£m b·∫£o truy v·∫•n ƒë√∫ng b·∫£ng v√† ƒëi·ªÅu ki·ªán
            const { data: userProfileData, error: userError } = await supabase
              .from('users') 
              .select('*')
              .eq('user_id', authUser.id)
              .maybeSingle(); // S·ª≠ d·ª•ng maybeSingle thay v√¨ single ƒë·ªÉ kh√¥ng b√°o l·ªói khi kh√¥ng t√¨m th·∫•y
            
            console.log('[Profile] K·∫øt qu·∫£ truy v·∫•n users:', JSON.stringify({
              data: userProfileData,
              error: userError ? {
                message: userError.message,
                code: userError.code
              } : null
            }, null, 2));
            
            // N·∫øu c√≥ l·ªói, log l·ªói v√† x·ª≠ l√Ω
            if (userError && userError.code !== 'PGRST116') {
              console.error('[Profile] L·ªói khi truy v·∫•n users:', userError);
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y user ho·∫∑c c√≥ l·ªói, t·∫°o m·ªõi b·∫£n ghi
            if (!userProfileData || userError) {
              console.log('[Profile] Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ho·∫∑c c√≥ l·ªói, t·∫°o b·∫£n ghi m·ªõi...');
              
              // T·∫°o b·∫£n ghi ng∆∞·ªùi d√πng m·ªõi trong b·∫£ng users
              const { data: newUser, error: createError } = await supabase
                .from('users')
                .insert([
                  {
                    user_id: authUser.id,
                    email: authUser.email,
                    full_name: authUser.user_metadata?.full_name || authUser.user_metadata?.name || '',
                    phone: authUser.user_metadata?.phone || '',
                    hometown: authUser.user_metadata?.hometown || '',
                    birth_date: authUser.user_metadata?.birth_date || null
                  }
                ])
                .select();
              
              // X·ª≠ l√Ω k·∫øt qu·∫£ t·∫°o user m·ªõi
              if (createError) {
                console.error('[Profile] L·ªói khi t·∫°o h·ªì s∆° ng∆∞·ªùi d√πng m·ªõi:', createError);
              } else if (newUser && newUser.length > 0) {
                console.log('[Profile] ƒê√£ t·∫°o h·ªì s∆° ng∆∞·ªùi d√πng m·ªõi th√†nh c√¥ng:', newUser[0]);
                if (isMounted) {
                  setUserData(newUser[0] as UserData);
                  setEditFormData({
                    fullName: newUser[0].full_name || '',
                    phone: newUser[0].phone || '',
                    hometown: newUser[0].hometown || '',
                    birth_date: newUser[0].birth_date || '',
                  });
                }
              }
            } else {
              // T√¨m th·∫•y user data, c·∫≠p nh·∫≠t state
              console.log('[Profile] ƒê√£ t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', userProfileData);
              if (isMounted) {
                setUserData(userProfileData as UserData);
                setEditFormData({
                  fullName: userProfileData.full_name || '',
                  phone: userProfileData.phone || '',
                  hometown: userProfileData.hometown || '',
                  birth_date: userProfileData.birth_date || '',
                });
              }
            }
          } catch (userQueryError) {
            console.error('[Profile] L·ªói khi truy v·∫•n th√¥ng tin ng∆∞·ªùi d√πng:', userQueryError);
          }
          
          // 3. L·∫•y th√¥ng tin t√†i kho·∫£n t·ª´ database
          console.log('[Profile] ƒêang truy v·∫•n b·∫£ng accounts v·ªõi user_id:', authUser.id)
          try {
            const { data: accountInfo, error: accountError } = await supabase
              .from('accounts') 
              .select('*')
              .eq('user_id', authUser.id)
              .maybeSingle(); // S·ª≠ d·ª•ng maybeSingle thay v√¨ single
            
            console.log('[Profile] K·∫øt qu·∫£ truy v·∫•n accounts:', JSON.stringify({
              data: accountInfo,
              error: accountError ? {
                message: accountError.message,
                code: accountError.code
              } : null
            }, null, 2));
            
            // N·∫øu kh√¥ng t√¨m th·∫•y account ho·∫∑c c√≥ l·ªói, t·∫°o m·ªõi b·∫£n ghi
            if (!accountInfo || accountError) {
              console.log('[Profile] Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n ho·∫∑c c√≥ l·ªói, t·∫°o m·ªõi...');
              
              // T·∫°o b·∫£n ghi t√†i kho·∫£n m·ªõi
              const { data: newAccount, error: createAccountError } = await supabase
                .from('accounts')
                .insert([
                  {
                    user_id: authUser.id,
                    username: authUser.email,
                    role: 'customer',
                    status: 'active',
                  }
                ])
                .select();
              
              if (createAccountError) {
                console.error('[Profile] L·ªói khi t·∫°o t√†i kho·∫£n m·ªõi:', createAccountError);
              } else if (newAccount && newAccount.length > 0) {
                console.log('[Profile] ƒê√£ t·∫°o t√†i kho·∫£n m·ªõi th√†nh c√¥ng:', newAccount[0]);
                if (isMounted) {
                  setAccountData(newAccount[0] as AccountData);
                }
              }
            } else {
              // T√¨m th·∫•y account data, c·∫≠p nh·∫≠t state
              console.log('[Profile] ƒê√£ t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n:', accountInfo);
              if (isMounted) {
                setAccountData(accountInfo as AccountData);
              }
            }
          } catch (accountQueryError) {
            console.error('[Profile] L·ªói khi truy v·∫•n th√¥ng tin t√†i kho·∫£n:', accountQueryError);
          }
        } catch (authError: any) {
          console.error('[Profile] L·ªói x√°c th·ª±c:', authError)
          
          if (isMounted) {
            setUser({
              email: 'guest@example.com',
              id: 'guest-user',
              user_metadata: {
                name: 'Kh√°ch'
              }
            });
            setFormError('L·ªói x√°c th·ª±c: ' + (authError?.message || 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng'));
            setLoading(false);
          }
        } finally {
          if (isMounted) {
            // ƒê·∫£m b·∫£o loading lu√¥n d·ª´ng sau khi x·ª≠ l√Ω xong
            setTimeout(() => {
              if (isMounted) setLoading(false);
            }, 1000);
          }
        }
      } catch (error: any) {
        console.error('[Profile] L·ªói fetching user data:', error)
        setFormError(`L·ªói: ${error?.message || error || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu ng∆∞·ªùi d√πng'}`)
        setLoading(false)
      }
    }

    if (mounted) {
      // ƒê·∫∑t m·ªôt timeout ng·∫Øn ƒë·ªÉ ƒë·∫£m b·∫£o mounted th·ª±c s·ª± ƒë√£ ho√†n th√†nh
      setTimeout(() => {
        if (isMounted) {
          fetchUserData();
        }
      }, 100);
    }
    
    return () => {
      isMounted = false;
      clearTimeout(loadingTimeout);
      // X√≥a flag ki·ªÉm tra phi√™n khi component unmount
      sessionStorage.removeItem('profile_session_checked');
    }
  }, [mounted, loading])
  
  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi gi√° tr·ªã form ch·ªânh s·ª≠a
  const handleEditFormChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    setEditFormData({
      ...editFormData,
      [e.target.name]: e.target.value
    })
  }
  
  // H√†m x·ª≠ l√Ω khi thay ƒë·ªïi gi√° tr·ªã form m·∫≠t kh·∫©u
  const handlePasswordFormChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setPasswordFormData({
      ...passwordFormData,
      [e.target.name]: e.target.value
    })
  }
  
  // H√†m l∆∞u th√¥ng tin ch·ªânh s·ª≠a
  const handleSaveProfile = async (e: React.FormEvent) => {
    e.preventDefault()
    setFormError('')
    setFormSuccess('')
    
    try {
      const supabase = createClient()
      
      if (!userData || !user) {
        throw new Error('Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng')
      }
      
      // 1. C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng trong database (b·∫£ng users - vi·∫øt th∆∞·ªùng)
      const { error: updateError } = await supabase
        .from('users')
        .update({
          full_name: editFormData.fullName,
          phone: editFormData.phone,
          hometown: editFormData.hometown,
          birth_date: editFormData.birth_date,
          updated_at: new Date().toISOString(),
        })
        .eq('user_id', user.id)
      
      if (updateError) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:', updateError.message, updateError.code, updateError.details)
        throw new Error(`L·ªói khi c·∫≠p nh·∫≠t: ${updateError.message}`)
      }
      
      // 2. C·∫≠p nh·∫≠t l·∫°i th√¥ng tin ng∆∞·ªùi d√πng trong state
      const { data: updatedUserData, error: refreshError } = await supabase
        .from('users')
        .select('*')
        .eq('user_id', user.id)
        .single()
        
      if (refreshError) {
        console.error('L·ªói khi l√†m m·ªõi d·ªØ li·ªáu:', refreshError.message, refreshError.code)
      } else if (updatedUserData) {
        setUserData(updatedUserData as UserData)
      }
      
      setFormSuccess('Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng')
      setIsEditing(false)
    } catch (error: any) {
      console.error('L·ªói c·∫≠p nh·∫≠t h·ªì s∆°:', error.message ? error.message : JSON.stringify(error))
      setFormError(error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t th√¥ng tin')
    }
  }
  
  // H√†m ƒë·ªïi m·∫≠t kh·∫©u
  const handleChangePassword = async (e: React.FormEvent) => {
    e.preventDefault()
    setFormError('')
    setFormSuccess('')
    
    if (passwordFormData.newPassword !== passwordFormData.confirmPassword) {
      setFormError('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp')
      return
    }
    
    if (passwordFormData.newPassword.length < 6) {
      setFormError('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±')
      return
    }
    
    try {
      const supabase = createClient()
      
      const { error } = await supabase.auth.updateUser({
        password: passwordFormData.newPassword
      })
      
      if (error) {
        console.error('L·ªói ƒë·ªïi m·∫≠t kh·∫©u:', error.message)
        throw new Error(`L·ªói ƒë·ªïi m·∫≠t kh·∫©u: ${error.message}`)
      }
      
      setFormSuccess('M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng')
      setIsChangingPassword(false)
      setPasswordFormData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      })
    } catch (error: any) {
      console.error('L·ªói ƒë·ªïi m·∫≠t kh·∫©u:', error.message ? error.message : JSON.stringify(error))
      setFormError(error.message || 'C√≥ l·ªói x·∫£y ra khi thay ƒë·ªïi m·∫≠t kh·∫©u')
    }
  }
  
  // S·ª≠a l·∫°i h√†m x·ª≠ l√Ω ƒëƒÉng xu·∫•t
  const handleLogout = async () => {
    console.log('ƒêang ti·∫øn h√†nh ƒëƒÉng xu·∫•t...');
    setFormError('');
    setFormSuccess('ƒêang ƒëƒÉng xu·∫•t...');
    
    try {
      // ƒê√°nh d·∫•u l√† ƒëƒÉng xu·∫•t c√≥ ch·ªß √Ω
      sessionStorage.setItem('intentional_logout', 'true');
      sessionStorage.setItem('user_logged_out', 'true');
      
      // D√πng h√†m fetch ƒë·ªÉ g·ªçi API ƒëƒÉng xu·∫•t
      await fetch('/api/auth/signout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      // X√≥a cache v√† session ngay l·∫≠p t·ª©c
      localStorage.removeItem('sb_session_cache');
      
      // N·∫øu d√πng client object ƒë·ªÉ ƒëƒÉng xu·∫•t kh√¥ng ƒë∆∞·ª£c, x√≥a tr·ª±c ti·∫øp cookies
      Object.keys(localStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('sb-')) {
          localStorage.removeItem(key);
        }
      });
      
      // X√≥a cookies
      document.cookie.split(";").forEach(c => {
        const cookieName = c.split("=")[0].trim();
        if (cookieName.includes('supabase') || cookieName.includes('sb-')) {
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
        }
      });
      
      setFormSuccess('ƒêƒÉng xu·∫•t th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...');
      
      // Chuy·ªÉn h∆∞·ªõng tr·ª±c ti·∫øp ƒë·∫øn trang ƒëƒÉng nh·∫≠p
      window.location.href = '/auth/signin?logout=true&t=' + Date.now();
    } catch (error: any) {
      console.error('L·ªói khi ƒëƒÉng xu·∫•t:', error);
      
      // N·∫øu c√≥ l·ªói, v·∫´n th·ª≠ logout b·∫±ng ph∆∞∆°ng ph√°p thay th·∫ø
      try {
        const supabase = createClient();
        await supabase.auth.signOut();
      } catch (e) {
        console.error('L·ªói khi ƒëƒÉng xu·∫•t qua Supabase client:', e);
      }
      
      // Chuy·ªÉn h∆∞·ªõng b·∫•t k·ªÉ th·∫ø n√†o
      window.location.href = '/auth/signin?logout=true&t=' + Date.now();
    }
  };
  
  // H√†m ƒë·ªÉ chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p khi phi√™n h·∫øt h·∫°n
  const redirectToLogin = (message: string) => {
    console.log('[Profile] ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p:', message);
    setFormError(message || 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.')
    
    // X√≥a c√°c flag phi√™n trong sessionStorage
    sessionStorage.removeItem('profile_session_checked');
    sessionStorage.removeItem('dashboard_session_checked');
    
    // X√≥a d·ªØ li·ªáu phi√™n c·ª•c b·ªô 
    try {
      console.log('[Profile] ƒêang x√≥a d·ªØ li·ªáu phi√™n c·ª•c b·ªô...');
      
      // X√≥a localStorage li√™n quan ƒë·∫øn Supabase
      Object.keys(localStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('sb-')) {
          localStorage.removeItem(key);
          console.log(`[Profile] ƒê√£ x√≥a localStorage: ${key}`);
        }
      });
      
      // X√≥a sessionStorage li√™n quan ƒë·∫øn Supabase
      Object.keys(sessionStorage).forEach(key => {
        if (key.includes('supabase') || key.includes('sb-')) {
          sessionStorage.removeItem(key);
          console.log(`[Profile] ƒê√£ x√≥a sessionStorage: ${key}`);
        }
      });
      
      // X√≥a cookies li√™n quan ƒë·∫øn Supabase
      document.cookie.split(";").forEach(c => {
        const cookieName = c.split("=")[0].trim();
        if (cookieName.includes('supabase') || cookieName.includes('sb-')) {
          document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
          console.log(`[Profile] ƒê√£ x√≥a cookie: ${cookieName}`);
        }
      });
      
      console.log('[Profile] ƒê√£ x√≥a xong d·ªØ li·ªáu phi√™n c·ª•c b·ªô');
    } catch (clearError) {
      console.error('[Profile] L·ªói khi x√≥a d·ªØ li·ªáu c·ª•c b·ªô:', clearError)
    }
    
    // Chuy·ªÉn h∆∞·ªõng ƒë∆°n gi·∫£n h√≥a v·ªõi c√°c tham s·ªë quan tr·ªçng
    console.log('[Profile] Chu·∫©n b·ªã chuy·ªÉn h∆∞·ªõng sau 1 gi√¢y');
    setTimeout(() => {
      // Th√™m timestamp ƒë·ªÉ tr√°nh browser cache v√† th√™m noLoop ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
      window.location.replace(`/auth/signin?noLoop=true&expired=true&from=profile&t=${Date.now()}`);
    }, 1000);
  };
  
  // Th√™m h√†m n√†y ·ªü ƒë·∫ßu component (b√™n trong function ProfilePage)
  const getCachedSession = () => {
    try {
      const cachedSessionStr = localStorage.getItem('sb_session_cache');
      if (cachedSessionStr) {
        const cachedSession = JSON.parse(cachedSessionStr);
        const now = Date.now();
        // Ki·ªÉm tra n·∫øu cache ch∆∞a qu√° h·∫°n (h·∫øt h·∫°n ho·∫∑c qu√° 10 ph√∫t)
        if (cachedSession.expires_at && cachedSession.timestamp &&
            (cachedSession.expires_at * 1000 > now) &&
            (now - cachedSession.timestamp < 10 * 60 * 1000)) {
          console.log('[Profile] S·ª≠ d·ª•ng session cache');
          return cachedSession.user;
        }
      }
    } catch (error) {
      console.error('[Profile] L·ªói khi ƒë·ªçc session cache:', error);
    }
    return null;
  };
  
  // Thay ƒë·ªïi ph·∫ßn return d∆∞·ªõi ƒë√¢y ƒë·ªÉ kh√¥ng hi·ªán spinner khi loading
  if (!mounted) {
    return (
      <div className="flex items-center justify-center h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-gray-900"></div>
        <p className="ml-2">ƒêang kh·ªüi t·∫°o trang...</p>
      </div>
    )
  }

  const { theme } = themeState

  return (
    <div>
      <h1 className="text-2xl font-semibold text-gray-900 mb-8">Th√¥ng tin c√° nh√¢n</h1>
      
      {formError && (
        <div className="mb-4 p-3 bg-red-100 text-red-700 rounded-md">
          {formError}
        </div>
      )}
      
      {formSuccess && (
        <div className="mb-4 p-3 bg-green-100 text-green-700 rounded-md">
          {formSuccess}
        </div>
      )}
      
      <div className="bg-white shadow overflow-hidden sm:rounded-lg">
        <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
          <div>
            <h3 className="text-lg leading-6 font-medium text-gray-900">Th√¥ng tin ng∆∞·ªùi d√πng</h3>
            <p className="mt-1 max-w-2xl text-sm text-gray-500">Chi ti·∫øt t√†i kho·∫£n v√† th√¥ng tin c√° nh√¢n</p>
          </div>
          {user && user.id !== 'guest-user' && (
            <button 
              onClick={() => setIsEditing(!isEditing)}
              className={`px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${theme.buttonBg} ${theme.buttonHoverBg} transition duration-150 ease-in-out`}
            >
              {isEditing ? 'H·ªßy' : 'Ch·ªânh s·ª≠a'}
            </button>
          )}
        </div>
        
        {!isEditing ? (
          <div className="border-t border-gray-200">
            <dl>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Email</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{user?.email || 'Ch∆∞a ƒëƒÉng nh·∫≠p'}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">T√™n ng∆∞·ªùi d√πng</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {userData?.full_name || user?.user_metadata?.name || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                </dd>
              </div>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">S·ªë ƒëi·ªán tho·∫°i</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  {userData?.phone || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                </dd>
              </div>
              
              {/* N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã th√¥ng b√°o */}
              {user?.id === 'guest-user' && (
                <div className="bg-yellow-50 px-4 py-5 sm:px-6">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <h3 className="text-sm font-medium text-yellow-800">Th√¥ng tin b·ªã gi·ªõi h·∫°n</h3>
                      <div className="mt-2 text-sm text-yellow-700">
                        <p>Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë·∫ßy ƒë·ªß th√¥ng tin c√° nh√¢n v√† ch·ªânh s·ª≠a h·ªì s∆°.</p>
                      </div>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Ti·∫øp t·ª•c hi·ªÉn th·ªã c√°c th√¥ng tin kh√°c ch·ªâ khi c√≥ userData */}
              {userData && (
                <>
                  <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">ƒê·ªãa ch·ªâ</dt>
                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                      {userData?.hometown || 'Ch∆∞a c·∫≠p nh·∫≠t'}
                    </dd>
                  </div>
                  <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">Ng√†y sinh</dt>
                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                      {userData?.birth_date ? new Date(userData.birth_date).toLocaleDateString('vi-VN') : 'Ch∆∞a c·∫≠p nh·∫≠t'}
                    </dd>
                  </div>
                </>
              )}
              
              {/* Hi·ªÉn th·ªã th√¥ng tin t√†i kho·∫£n ch·ªâ khi c√≥ accountData */}
              {accountData && (
                <>
                  <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">Vai tr√≤</dt>
                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                      {USER_ROLES[accountData.role as UserRole] || 'Ch∆∞a x√°c ƒë·ªãnh'}
                    </dd>
                  </div>
                  <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">Tr·∫°ng th√°i t√†i kho·∫£n</dt>
                    <dd className="mt-1 text-sm sm:mt-0 sm:col-span-2">
                      <span className={`px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full ${
                        accountData?.status === 'active' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {accountData?.status === 'active' ? 'ƒêang ho·∫°t ƒë·ªông' : 'ƒê√£ kh√≥a'}
                      </span>
                    </dd>
                  </div>
                  <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">Ng√†y t·∫°o t√†i kho·∫£n</dt>
                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                      {accountData?.created_at ? new Date(accountData.created_at).toLocaleDateString('vi-VN') : 'Kh√¥ng c√≥ th√¥ng tin'}
                    </dd>
                  </div>
                  <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt className="text-sm font-medium text-gray-500">L·∫ßn ƒëƒÉng nh·∫≠p cu·ªëi</dt>
                    <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                      {accountData?.last_login ? new Date(accountData.last_login).toLocaleString('vi-VN') : 'Kh√¥ng c√≥ th√¥ng tin'}
                    </dd>
                  </div>
                </>
              )}
            </dl>
          </div>
        ) : (
          <div className="border-t border-gray-200">
            <form onSubmit={handleSaveProfile} className="px-4 py-5">
              <div className="grid grid-cols-1 gap-y-6 sm:grid-cols-2 sm:gap-x-6">
                <div>
                  <label htmlFor="fullName" className="block text-sm font-medium text-gray-700">
                    T√™n ng∆∞·ªùi d√πng <span className="text-red-500">*</span>
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <input
                      type="text"
                      name="fullName"
                      id="fullName"
                      required
                      value={editFormData.fullName}
                      onChange={handleEditFormChange}
                      className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                      placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß c·ªßa b·∫°n"
                    />
                  </div>
                </div>
                
                <div>
                  <label htmlFor="phone" className="block text-sm font-medium text-gray-700">
                    S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <input
                      type="text"
                      name="phone"
                      id="phone"
                      required
                      value={editFormData.phone}
                      onChange={handleEditFormChange}
                      className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n"
                    />
                  </div>
                </div>
                
                <div>
                  <label htmlFor="birth_date" className="block text-sm font-medium text-gray-700">
                    Ng√†y sinh
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <input
                      type="date"
                      name="birth_date"
                      id="birth_date"
                      value={editFormData.birth_date}
                      onChange={handleEditFormChange}
                      className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                    />
                  </div>
                </div>
                
                <div>
                  <label htmlFor="role" className="block text-sm font-medium text-gray-700">
                    Vai tr√≤
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <input
                      type="text"
                      id="role"
                      value={accountData ? USER_ROLES[accountData.role as UserRole] : 'Kh√°ch h√†ng'}
                      readOnly
                      className="bg-gray-100 shadow-sm block w-full sm:text-sm border-gray-300 rounded-md p-2.5 cursor-not-allowed"
                    />
                    <p className="mt-1 text-xs text-gray-500">Vai tr√≤ ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi admin h·ªá th·ªëng</p>
                  </div>
                </div>
                
                <div className="sm:col-span-2">
                  <label htmlFor="hometown" className="block text-sm font-medium text-gray-700">
                    ƒê·ªãa ch·ªâ
                  </label>
                  <div className="mt-1 relative rounded-md shadow-sm">
                    <textarea
                      name="hometown"
                      id="hometown"
                      rows={3}
                      value={editFormData.hometown}
                      onChange={handleEditFormChange}
                      className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ªßa b·∫°n"
                    />
                  </div>
                </div>
              </div>
              
              <div className="mt-6 flex justify-end space-x-3">
                <button
                  type="button"
                  onClick={() => setIsEditing(false)}
                  className="px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition duration-150 ease-in-out"
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  className={`px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white ${theme.buttonBg} ${theme.buttonHoverBg} transition duration-150 ease-in-out`}
                >
                  L∆∞u th√¥ng tin
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
      
      <div className="mt-8 bg-white shadow overflow-hidden sm:rounded-lg">
        <div className="px-4 py-5 sm:px-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900">B·∫£o m·∫≠t t√†i kho·∫£n</h3>
          <p className="mt-1 max-w-2xl text-sm text-gray-500">Thi·∫øt l·∫≠p v√† qu·∫£n l√Ω b·∫£o m·∫≠t</p>
        </div>
        
        {/* Ch·ªâ hi·ªÉn th·ªã c√°c t√πy ch·ªçn b·∫£o m·∫≠t khi ƒë√£ ƒëƒÉng nh·∫≠p */}
        {user && user.id !== 'guest-user' ? (
          !isChangingPassword ? (
            <div className="border-t border-gray-200">
              <div className="px-4 py-5 sm:p-6 flex space-x-4">
                <button
                  onClick={() => setIsChangingPassword(true)}
                  className={`px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 transition duration-150 ease-in-out`}
                >
                  ƒê·ªïi m·∫≠t kh·∫©u
                </button>
                
                <button
                  onClick={handleLogout}
                  className="px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition duration-150 ease-in-out"
                >
                  ƒêƒÉng xu·∫•t
                </button>
              </div>
            </div>
          ) : (
            <div className="border-t border-gray-200">
              <form onSubmit={handleChangePassword} className="px-4 py-5">
                <div className="space-y-4">
                  <div>
                    <label htmlFor="currentPassword" className="block text-sm font-medium text-gray-700">
                      M·∫≠t kh·∫©u hi·ªán t·∫°i <span className="text-red-500">*</span>
                    </label>
                    <div className="mt-1 relative rounded-md shadow-sm">
                      <input
                        type="password"
                        name="currentPassword"
                        id="currentPassword"
                        required
                        value={passwordFormData.currentPassword}
                        onChange={handlePasswordFormChange}
                        className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700">
                      M·∫≠t kh·∫©u m·ªõi <span className="text-red-500">*</span>
                    </label>
                    <div className="mt-1 relative rounded-md shadow-sm">
                      <input
                        type="password"
                        name="newPassword"
                        id="newPassword"
                        required
                        value={passwordFormData.newPassword}
                        onChange={handlePasswordFormChange}
                        className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">
                      X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi <span className="text-red-500">*</span>
                    </label>
                    <div className="mt-1 relative rounded-md shadow-sm">
                      <input
                        type="password"
                        name="confirmPassword"
                        id="confirmPassword"
                        required
                        value={passwordFormData.confirmPassword}
                        onChange={handlePasswordFormChange}
                        className={`shadow-sm focus:ring-${theme.textColor.split('-')[1]}-500 focus:border-${theme.textColor.split('-')[1]}-500 block w-full sm:text-sm border-gray-300 rounded-md p-2.5 transition duration-150 ease-in-out`}
                        placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                      />
                    </div>
                  </div>
                </div>
                
                <div className="mt-6 flex justify-end space-x-3">
                  <button
                    type="button"
                    onClick={() => setIsChangingPassword(false)}
                    className="px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 transition duration-150 ease-in-out"
                  >
                    H·ªßy
                  </button>
                  <button
                    type="submit"
                    className={`px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700 transition duration-150 ease-in-out`}
                  >
                    C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
                  </button>
                </div>
              </form>
            </div>
          )
        ) : (
          <div className="border-t border-gray-200">
            <div className="px-4 py-5 sm:p-6">
              <div className="bg-blue-50 p-4 rounded-md">
                <div className="flex">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3 flex-1">
                    <p className="text-sm text-blue-700">
                      B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ qu·∫£n l√Ω b·∫£o m·∫≠t t√†i kho·∫£n.
                    </p>
                    <div className="mt-3">
                      <a
                        href="/auth/signin?redirectTo=/dashboard/profile"
                        className="inline-flex items-center px-4 py-2 border border-transparent text-sm leading-5 font-medium rounded-md text-white bg-blue-600 hover:bg-blue-500 focus:outline-none focus:border-blue-700 focus:shadow-outline-blue active:bg-blue-700 transition ease-in-out duration-150"
                      >
                        ƒêƒÉng nh·∫≠p
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
